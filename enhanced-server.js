const http = require('http');
const https = require('https');
const fs = require('fs');
const path = require('path');
const url = require('url');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    port: 8000,
    telegramToken: '8256319983:AAGZKs_9Nqw2Kuep3HauUsSWpps5y7iGAcs', // –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    chatId: '542791657', // –í–∞—à Chat ID
    webhookPath: '/webhook/telegram',
    monitorClients: new Set() // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
};

// –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è Server-Sent Events
const sseClients = new Set();

const server = http.createServer((req, res) => {
    const parsedUrl = url.parse(req.url, true);
    const pathname = parsedUrl.pathname;
    
    // CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
    if (pathname === CONFIG.webhookPath && req.method === 'POST') {
        handleTelegramWebhook(req, res);
        return;
    }
    
    // Server-Sent Events –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    if (pathname === '/monitor/events') {
        handleSSE(req, res);
        return;
    }
    
    // API –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞
    if (pathname === '/api/new-request' && req.method === 'POST') {
        handleNewRequestFromSite(req, res);
        return;
    }
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    handleStaticFiles(req, res, pathname);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
function handleTelegramWebhook(req, res) {
    let body = '';
    
    req.on('data', chunk => {
        body += chunk.toString();
    });
    
    req.on('end', () => {
        try {
            const update = JSON.parse(body);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
            if (update.message && update.message.text) {
                const message = update.message.text;
                
                // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä–∫–µ—Ä—ã –∑–∞—è–≤–∫–∏
                if (message.includes('–ù–û–í–ê –ó–ê–Ø–í–ö–ê') || message.includes('PC-Master')) {
                    const requestData = parseRequestFromMessage(message);
                    broadcastNewRequest(requestData);
                }
            }
            
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ ok: true }));
            
        } catch (error) {
            console.error('Error processing webhook:', error);
            res.writeHead(400, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Invalid JSON' }));
        }
    });
}

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
function parseRequestFromMessage(message) {
    const nameMatch = message.match(/–Ü–º'—è:\*\s*(.+)/);
    const phoneMatch = message.match(/–¢–µ–ª–µ—Ñ–æ–Ω:\*\s*(.+)/);
    const serviceMatch = message.match(/–ü–æ—Å–ª—É–≥–∞:\*\s*(.+)/);
    const timeMatch = message.match(/–ß–∞—Å:\*\s*(.+)/);
    
    return {
        name: nameMatch ? nameMatch[1].trim() : '–ù–µ–≤—ñ–¥–æ–º–æ',
        phone: phoneMatch ? phoneMatch[1].trim() : '–ù–µ–≤—ñ–¥–æ–º–æ',
        service: serviceMatch ? serviceMatch[1].trim() : '–ù–µ–≤—ñ–¥–æ–º–æ',
        time: new Date().toISOString(),
        message: message
    };
}

// –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function broadcastNewRequest(requestData) {
    const eventData = JSON.stringify({
        type: 'new_request',
        data: requestData,
        timestamp: Date.now()
    });
    
    console.log('üì¢ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:', requestData.name, requestData.phone);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º SSE –∫–ª–∏–µ–Ω—Ç–∞–º
    sseClients.forEach(client => {
        try {
            client.write(`data: ${eventData}\n\n`);
        } catch (error) {
            console.error('Error sending SSE:', error);
            sseClients.delete(client);
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Server-Sent Events
function handleSSE(req, res) {
    res.writeHead(200, {
        'Content-Type': 'text/event-stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
        'Access-Control-Allow-Origin': '*'
    });
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    res.write('data: {"type":"connected","message":"–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É"}\n\n');
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
    sseClients.add(res);
    
    // Heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const heartbeat = setInterval(() => {
        try {
            res.write('data: {"type":"heartbeat","timestamp":' + Date.now() + '}\n\n');
        } catch (error) {
            clearInterval(heartbeat);
            sseClients.delete(res);
        }
    }, 30000);
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
    req.on('close', () => {
        clearInterval(heartbeat);
        sseClients.delete(res);
        console.log('–ö–ª—ñ—î–Ω—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è');
    });
    
    console.log('–ù–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞
function handleNewRequestFromSite(req, res) {
    let body = '';
    
    req.on('data', chunk => {
        body += chunk.toString();
    });
    
    req.on('end', () => {
        try {
            const requestData = JSON.parse(body);
            
            console.log('üìû –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:', requestData.name, requestData.phone);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
            requestData.time = new Date().toISOString();
            requestData.source = 'website';
            
            // –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∞–º
            broadcastNewRequest(requestData);
            
            res.writeHead(200, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ success: true, message: '–ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞' }));
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error);
            res.writeHead(400, { 'Content-Type': 'application/json' });
            res.end(JSON.stringify({ error: 'Invalid JSON' }));
        }
    });
}

// –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function handleTestNotification(req, res) {
    const testData = {
        name: '–¢–µ—Å—Ç–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç',
        phone: '+38 (097) 123-45-67',
        service: '–¢–µ—Å—Ç–æ–≤–∞ –ø–æ—Å–ª—É–≥–∞',
        time: new Date().toISOString(),
        message: '–¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
    };
    
    broadcastNewRequest(testData);
    
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ success: true, message: '–¢–µ—Å—Ç–æ–≤–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ' }));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
function handleStaticFiles(req, res, pathname) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
    if (pathname === '/' || pathname === '/index.html') {
        serveFile(res, 'index.html', 'text/html; charset=utf-8');
    }
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∑–∞—è–≤–æ–∫
    else if (pathname === '/monitor' || pathname === '/request-monitor.html') {
        serveFile(res, 'request-monitor.html', 'text/html; charset=utf-8');
    }
    // CSS —Ñ–∞–π–ª—ã
    else if (pathname.startsWith('/css/')) {
        serveFile(res, pathname.slice(1), 'text/css');
    }
    // JS —Ñ–∞–π–ª—ã
    else if (pathname.startsWith('/js/')) {
        serveFile(res, pathname.slice(1), 'application/javascript');
    }
    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    else if (pathname.startsWith('/images/')) {
        const ext = path.extname(pathname);
        const mimeType = getMimeType(ext);
        serveFile(res, pathname.slice(1), mimeType);
    }
    // –î—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã
    else if (pathname === '/favicon.svg') {
        serveFile(res, 'favicon.svg', 'image/svg+xml');
    }
    else if (pathname === '/robots.txt') {
        serveFile(res, 'robots.txt', 'text/plain');
    }
    else if (pathname === '/sitemap.xml') {
        serveFile(res, 'sitemap.xml', 'application/xml');
    }
    else {
        res.writeHead(404, { 'Content-Type': 'text/html; charset=utf-8' });
        res.end(`
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="utf-8">
                <title>404 - –°—Ç–æ—Ä—ñ–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</title>
                <style>
                    body { font-family: Arial, sans-serif; text-align: center; padding: 50px; }
                    h1 { color: #e74c3c; }
                    a { color: #3498db; text-decoration: none; }
                </style>
            </head>
            <body>
                <h1>404 - –°—Ç–æ—Ä—ñ–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</h1>
                <p>–ó–∞–ø–∏—Ç—É–≤–∞–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ —ñ—Å–Ω—É—î.</p>
                <p><a href="/">‚Üê –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É</a></p>
                <p><a href="/monitor">üì± –ú–æ–Ω—ñ—Ç–æ—Ä –∑–∞—è–≤–æ–∫</a></p>
            </body>
            </html>
        `);
    }
}

// –°–µ—Ä–≤–∏—Å —Ñ–∞–π–ª–∞
function serveFile(res, filePath, contentType) {
    const fullPath = path.join(__dirname, filePath);
    
    fs.readFile(fullPath, (err, data) => {
        if (err) {
            console.error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É:', err);
            res.writeHead(404, { 'Content-Type': 'text/html; charset=utf-8' });
            res.end('–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        } else {
            res.writeHead(200, { 'Content-Type': contentType });
            res.end(data);
        }
    });
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
function getMimeType(ext) {
    const mimeTypes = {
        '.html': 'text/html; charset=utf-8',
        '.css': 'text/css',
        '.js': 'application/javascript',
        '.png': 'image/png',
        '.jpg': 'image/jpeg',
        '.jpeg': 'image/jpeg',
        '.gif': 'image/gif',
        '.svg': 'image/svg+xml',
        '.ico': 'image/x-icon',
        '.txt': 'text/plain',
        '.xml': 'application/xml',
        '.json': 'application/json'
    };
    
    return mimeTypes[ext] || 'application/octet-stream';
}

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
async function setupTelegramWebhook() {
    const webhookUrl = `https://your-domain.com${CONFIG.webhookPath}`;
    
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ngrok
    console.log('üì° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
    console.log(`curl -X POST "https://api.telegram.org/bot${CONFIG.telegramToken}/setWebhook" -d "url=${webhookUrl}"`);
    console.log('');
    console.log('üí° –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ngrok:');
    console.log('npm install -g ngrok');
    console.log(`ngrok http ${CONFIG.port}`);
    console.log('–ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ URL –æ—Ç ngrok –¥–ª—è webhook');
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(CONFIG.port, () => {
    console.log('üöÄ –°–µ—Ä–≤–µ—Ä PC-Master –∑–∞–ø—É—â–µ–Ω–æ!');
    console.log(`üì° –ü–æ—Ä—Ç: ${CONFIG.port}`);
    console.log(`üåê –û—Å–Ω–æ–≤–Ω–∏–π —Å–∞–π—Ç: http://localhost:${CONFIG.port}`);
    console.log(`üì± –ú–æ–Ω—ñ—Ç–æ—Ä –∑–∞—è–≤–æ–∫: http://localhost:${CONFIG.port}/monitor`);
    console.log(`üîó Webhook endpoint: http://localhost:${CONFIG.port}${CONFIG.webhookPath}`);
    console.log('');
    
    setupTelegramWebhook();
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    console.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Promise:', reason);
});

// Graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ');
        process.exit(0);
    });
});

module.exports = server;