// Site Health Check Script for pcmaster-khmelnytskyi.xyz
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∞–π—Ç–∞

class SiteHealthChecker {
    constructor() {
        this.domain = 'pcmaster-khmelnytskyi.xyz';
        this.checks = [];
        this.results = {
            total: 0,
            passed: 0,
            failed: 0,
            warnings: 0
        };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    async checkSSL() {
        try {
            const response = await fetch(`https://${this.domain}`, {
                method: 'HEAD',
                mode: 'no-cors'
            });
            this.addResult('SSL Certificate', 'PASS', 'SSL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        } catch (error) {
            this.addResult('SSL Certificate', 'FAIL', `SSL –æ—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    async checkCriticalFiles() {
        const files = [
            '/robots.txt',
            '/sitemap.xml',
            '/manifest.json',
            '/css/style.css',
            '/js/script.js'
        ];

        for (const file of files) {
            try {
                const response = await fetch(`https://${this.domain}${file}`, {
                    method: 'HEAD',
                    mode: 'no-cors'
                });
                this.addResult(`File Check: ${file}`, 'PASS', '–§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω');
            } catch (error) {
                this.addResult(`File Check: ${file}`, 'FAIL', `–§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
            }
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞-—Ç–µ–≥–æ–≤ SEO
    checkSEOTags() {
        const title = document.querySelector('title');
        const metaDesc = document.querySelector('meta[name="description"]');
        const canonicalLink = document.querySelector('link[rel="canonical"]');
        const structuredData = document.querySelector('script[type="application/ld+json"]');

        if (title && title.textContent.length > 10) {
            this.addResult('Title Tag', 'PASS', `Title: "${title.textContent}"`);
        } else {
            this.addResult('Title Tag', 'FAIL', 'Title –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
        }

        if (metaDesc && metaDesc.content.length > 50) {
            this.addResult('Meta Description', 'PASS', `Length: ${metaDesc.content.length} chars`);
        } else {
            this.addResult('Meta Description', 'FAIL', 'Meta description –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
        }

        if (canonicalLink) {
            this.addResult('Canonical URL', 'PASS', canonicalLink.href);
        } else {
            this.addResult('Canonical URL', 'WARNING', 'Canonical URL –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }

        if (structuredData) {
            this.addResult('Structured Data', 'PASS', 'Schema.org —Ä–∞–∑–º–µ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–∞');
        } else {
            this.addResult('Structured Data', 'FAIL', 'Structured data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    checkPerformance() {
        if ('connection' in navigator) {
            const connection = navigator.connection;
            this.addResult('Network Info', 'INFO', 
                `Type: ${connection.effectiveType}, Speed: ${connection.downlink}Mbps`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        const loadTime = performance.timing.loadEventEnd - performance.timing.navigationStart;
        if (loadTime < 3000) {
            this.addResult('Page Load Time', 'PASS', `${loadTime}ms`);
        } else if (loadTime < 5000) {
            this.addResult('Page Load Time', 'WARNING', `${loadTime}ms (–º–µ–¥–ª–µ–Ω–Ω–æ)`);
        } else {
            this.addResult('Page Load Time', 'FAIL', `${loadTime}ms (–æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ)`);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
    checkMobileReadiness() {
        const viewport = document.querySelector('meta[name="viewport"]');
        const isMobileDevice = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        
        if (viewport) {
            this.addResult('Viewport Meta', 'PASS', viewport.content);
        } else {
            this.addResult('Viewport Meta', 'FAIL', 'Viewport meta –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
        }

        if (isMobileDevice) {
            this.addResult('Mobile Device', 'INFO', '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    checkForms() {
        const contactForm = document.querySelector('.contact-form');
        const phoneLinks = document.querySelectorAll('a[href^="tel:"]');
        const socialLinks = document.querySelectorAll('.social-link');

        if (contactForm) {
            this.addResult('Contact Form', 'PASS', '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–∞–π–¥–µ–Ω–∞');
        } else {
            this.addResult('Contact Form', 'WARNING', '–§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }

        if (phoneLinks.length > 0) {
            this.addResult('Phone Links', 'PASS', `–ù–∞–π–¥–µ–Ω–æ ${phoneLinks.length} —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫`);
        } else {
            this.addResult('Phone Links', 'WARNING', '–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

        if (socialLinks.length > 0) {
            this.addResult('Social Links', 'PASS', `–ù–∞–π–¥–µ–Ω–æ ${socialLinks.length} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫`);
        } else {
            this.addResult('Social Links', 'WARNING', '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
    addResult(test, status, message) {
        this.checks.push({
            test,
            status,
            message,
            timestamp: new Date().toISOString()
        });

        this.results.total++;
        switch (status) {
            case 'PASS':
                this.results.passed++;
                break;
            case 'FAIL':
                this.results.failed++;
                break;
            case 'WARNING':
                this.results.warnings++;
                break;
        }
    }

    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    async runAllChecks() {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∞–π—Ç–∞...');
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        this.checkSEOTags();
        this.checkPerformance();
        this.checkMobileReadiness();
        this.checkForms();
        
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await this.checkSSL();
        await this.checkCriticalFiles();
        
        this.displayResults();
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    displayResults() {
        console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò –°–ê–ô–¢–ê:');
        console.log('='.repeat(50));
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.passed}`);
        console.log(`‚ùå –û—à–∏–±–∫–∏: ${this.results.failed}`);
        console.log(`‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.results.warnings}`);
        console.log(`üìà –û–±—â–∏–π —Å—á–µ—Ç: ${this.results.passed}/${this.results.total}`);
        
        const healthPercentage = Math.round((this.results.passed / this.results.total) * 100);
        console.log(`üéØ –ó–¥–æ—Ä–æ–≤—å–µ —Å–∞–π—Ç–∞: ${healthPercentage}%`);
        
        console.log('\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
        console.log('-'.repeat(50));
        
        this.checks.forEach(check => {
            const statusIcon = {
                'PASS': '‚úÖ',
                'FAIL': '‚ùå',
                'WARNING': '‚ö†Ô∏è',
                'INFO': '‚ÑπÔ∏è'
            }[check.status] || '‚ùì';
            
            console.log(`${statusIcon} ${check.test}: ${check.message}`);
        });

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if (this.results.failed > 0) {
            console.log('\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:');
            this.checks.filter(c => c.status === 'FAIL').forEach(check => {
                console.log(`‚Ä¢ ${check.test}: ${check.message}`);
            });
        }

        if (this.results.warnings > 0) {
            console.log('\n‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ö –£–õ–£–ß–®–ï–ù–ò–Æ:');
            this.checks.filter(c => c.status === 'WARNING').forEach(check => {
                console.log(`‚Ä¢ ${check.test}: ${check.message}`);
            });
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
        this.sendReport();
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
    sendReport() {
        const report = {
            domain: this.domain,
            timestamp: new Date().toISOString(),
            results: this.results,
            checks: this.checks,
            healthScore: Math.round((this.results.passed / this.results.total) * 100)
        };

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        localStorage.setItem('siteHealthReport', JSON.stringify(report));
        
        console.log('\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage');
        console.log('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: localStorage.getItem("siteHealthReport")');
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    setTimeout(async () => {
        const healthChecker = new SiteHealthChecker();
        await healthChecker.runAllChecks();
    }, 2000);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.SiteHealthChecker = SiteHealthChecker;